{"version":3,"sources":["coffees/CoffeeForm.tsx","coffees/CreateCoffee.tsx","coffees/ListCoffee.tsx","coffees/DetailCoffee.tsx","coffees/UpdateCoffee.tsx","icecreams/IcecreamForm.tsx","icecreams/CreateIcecream.tsx","icecreams/ListIcecream.tsx","icecreams/DetailIcecream.tsx","icecreams/UpdateIcecream.tsx","sandwichs/SandwichForm.tsx","sandwichs/CreateSandwich.tsx","sandwichs/ListSandwich.tsx","sandwichs/DetailSandwich.tsx","sandwichs/UpdateSandwich.tsx","App.tsx","index.tsx"],"names":["CoffeeForm","coffee","onSubmit","initialValues","price","flavour","sugar","validate","isSubmitting","type","name","placeholder","disabled","CreateCoffee","queryClient","useQueryClient","history","useHistory","createCoffee","useMutation","values","axios","post","onSuccess","invalidateQueries","setSubmitting","mutate","push","CoffeePreview","handleEdit","handleDelete","handleDetail","onClick","ListCoffees","coffeesQuery","useQuery","get","then","response","data","deleteCoffee","id","delete","length","map","DetailCoffee","useParams","isLoading","UpdateCoffee","updateCoffee","put","IcecreamForm","icecream","CreateIcecream","createIcecream","IcecreamPreview","ListIcecreams","icecreamsQuery","deleteIcecream","DetailIcecream","UpdateIcecream","updateIcecream","SandwichForm","sandwich","warm","CreateSandwich","createSandwich","SandwichPreview","ListSandwichs","sandwichsQuery","deleteSandwich","DetailSandwich","UpdateSandwich","updateSandwich","App","className","to","path","component","ListCoffee","ListIcecream","ListSandwich","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.a4a15046.chunk.js","sourcesContent":["import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { Coffee } from '../types'\n\ntype CreateProps = {\n  coffee?: Coffee\n  onSubmit: (values: Coffee, helpers: FormikHelpers<Coffee>) => void\n}\n\nfunction CoffeeForm({ coffee, onSubmit }: CreateProps) {\n  const initialValues: Coffee = {\n    price: coffee ? coffee.price : '',\n    flavour: coffee ? coffee.flavour : '',\n    sugar: coffee ? coffee.sugar : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='price' placeholder='Price' />\n\n          <Field type='text' name='flavour' placeholder='Flavour' />\n\n          <Field type='text' name='sugar' placeholder='Sugar' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default CoffeeForm\n","import axios from 'axios'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Coffee, CoffeeError } from '../types'\nimport CoffeeForm from './CoffeeForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateCoffee() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createCoffee = useMutation<Coffee, CoffeeError, Coffee>(\n    (values) => {\n      return axios.post('/api/v1/coffees', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('coffees')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: Coffee,\n    { setSubmitting }: FormikHelpers<Coffee>\n  ) => {\n    createCoffee.mutate(values)\n    setSubmitting?.(false)\n    history.push('/coffees')\n  }\n\n  return <CoffeeForm onSubmit={handleSubmit} />\n}\n\nexport default CreateCoffee\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport axios from 'axios'\nimport { Coffee } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype CoffeePreviewProps = {\n  coffee: Coffee\n  handleEdit: (coffee: Coffee) => void\n  handleDelete: (coffee: Coffee) => void\n  handleDetail: (coffee: Coffee) => void\n}\n\nfunction CoffeePreview({\n  coffee,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: CoffeePreviewProps) {\n  return (\n    <>\n      {coffee.price}\n      <br />\n      <button type='button' onClick={() => handleDetail(coffee)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(coffee)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(coffee)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListCoffees() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const coffeesQuery = useQuery<Coffee[]>('coffees', () => {\n    return axios\n      .get('/api/v1/coffees')\n      .then((response) => response.data) as Promise<Coffee[]>\n  })\n\n  const deleteCoffee = useMutation<any, any, Partial<Coffee>>(\n    ({ id }) => {\n      return axios.delete(`/api/v1/coffees/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('coffees')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: Coffee) => {\n    history.push(`/coffees/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: Coffee) => {\n    deleteCoffee.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: Coffee) => {\n    history.push(`/coffees/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{coffeesQuery.data?.length} coffees</p>\n      <ul>\n        {coffeesQuery.data?.map((coffee) => (\n          <li key={coffee.id}>\n            <CoffeePreview\n              coffee={coffee}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListCoffees\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport axios from 'axios'\nimport { useQuery } from 'react-query'\nimport { Coffee } from '../types'\n\nfunction DetailCoffee() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<Coffee>(['coffees', id], () =>\n    axios.get(`/api/v1/coffees/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const coffee = data as Coffee\n\n  return (\n    <div>\n      <label>{coffee.price}</label>\n      <br />\n\n      <label>{coffee.flavour}</label>\n      <br />\n\n      <label>{coffee.sugar}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailCoffee\n","import axios from 'axios'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport CoffeeForm from './CoffeeForm'\nimport { Coffee } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateCoffee() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<Coffee>(['coffees', id], () =>\n    axios.get(`/api/v1/coffees/${id}`).then((response) => response.data)\n  )\n\n  const updateCoffee = useMutation<Coffee, any, Coffee>(\n    (values: Coffee) =>\n      axios\n        .put(`/api/v1/coffees/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('coffees')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const coffee = data as Coffee\n  return (\n    <CoffeeForm\n      coffee={coffee}\n      onSubmit={(values, { setSubmitting }) => {\n        updateCoffee.mutate(values)\n        setSubmitting?.(false)\n        history.push('/coffees')\n      }}\n    />\n  )\n}\n\nexport default UpdateCoffee\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { Icecream } from '../types'\n\ntype CreateProps = {\n  icecream?: Icecream\n  onSubmit: (values: Icecream, helpers: FormikHelpers<Icecream>) => void\n}\n\nfunction IcecreamForm({ icecream, onSubmit }: CreateProps) {\n  const initialValues: Icecream = {\n    price: icecream ? icecream.price : '',\n    flavour: icecream ? icecream.flavour : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='price' placeholder='Price' />\n\n          <Field type='text' name='flavour' placeholder='Flavour' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default IcecreamForm\n","import axios from 'axios'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Icecream, IcecreamError } from '../types'\nimport IcecreamForm from './IcecreamForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateIcecream() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createIcecream = useMutation<Icecream, IcecreamError, Icecream>(\n    (values) => {\n      return axios.post('/api/v1/icecreams', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('icecreams')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: Icecream,\n    { setSubmitting }: FormikHelpers<Icecream>\n  ) => {\n    createIcecream.mutate(values)\n    setSubmitting?.(false)\n    history.push('/icecreams')\n  }\n\n  return <IcecreamForm onSubmit={handleSubmit} />\n}\n\nexport default CreateIcecream\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport axios from 'axios'\nimport { Icecream } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype IcecreamPreviewProps = {\n  icecream: Icecream\n  handleEdit: (icecream: Icecream) => void\n  handleDelete: (icecream: Icecream) => void\n  handleDetail: (icecream: Icecream) => void\n}\n\nfunction IcecreamPreview({\n  icecream,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: IcecreamPreviewProps) {\n  return (\n    <>\n      {icecream.price}\n      <br />\n      <button type='button' onClick={() => handleDetail(icecream)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(icecream)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(icecream)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListIcecreams() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const icecreamsQuery = useQuery<Icecream[]>('icecreams', () => {\n    return axios\n      .get('/api/v1/icecreams')\n      .then((response) => response.data) as Promise<Icecream[]>\n  })\n\n  const deleteIcecream = useMutation<any, any, Partial<Icecream>>(\n    ({ id }) => {\n      return axios.delete(`/api/v1/icecreams/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('icecreams')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: Icecream) => {\n    history.push(`/icecreams/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: Icecream) => {\n    deleteIcecream.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: Icecream) => {\n    history.push(`/icecreams/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{icecreamsQuery.data?.length} icecreams</p>\n      <ul>\n        {icecreamsQuery.data?.map((icecream) => (\n          <li key={icecream.id}>\n            <IcecreamPreview\n              icecream={icecream}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListIcecreams\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport axios from 'axios'\nimport { useQuery } from 'react-query'\nimport { Icecream } from '../types'\n\nfunction DetailIcecream() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<Icecream>(['icecreams', id], () =>\n    axios.get(`/api/v1/icecreams/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const icecream = data as Icecream\n\n  return (\n    <div>\n      <label>{icecream.price}</label>\n      <br />\n\n      <label>{icecream.flavour}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailIcecream\n","import axios from 'axios'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport IcecreamForm from './IcecreamForm'\nimport { Icecream } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateIcecream() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<Icecream>(['icecreams', id], () =>\n    axios.get(`/api/v1/icecreams/${id}`).then((response) => response.data)\n  )\n\n  const updateIcecream = useMutation<Icecream, any, Icecream>(\n    (values: Icecream) =>\n      axios\n        .put(`/api/v1/icecreams/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('icecreams')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const icecream = data as Icecream\n  return (\n    <IcecreamForm\n      icecream={icecream}\n      onSubmit={(values, { setSubmitting }) => {\n        updateIcecream.mutate(values)\n        setSubmitting?.(false)\n        history.push('/icecreams')\n      }}\n    />\n  )\n}\n\nexport default UpdateIcecream\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { Sandwich } from '../types'\n\ntype CreateProps = {\n  sandwich?: Sandwich\n  onSubmit: (values: Sandwich, helpers: FormikHelpers<Sandwich>) => void\n}\n\nfunction SandwichForm({ sandwich, onSubmit }: CreateProps) {\n  const initialValues: Sandwich = {\n    price: sandwich ? sandwich.price : '',\n    type: sandwich ? sandwich.type : '',\n    warm: sandwich ? sandwich.warm : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='price' placeholder='Price' />\n\n          <Field type='text' name='type' placeholder='Type' />\n\n          <Field type='text' name='warm' placeholder='Warm' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default SandwichForm\n","import axios from 'axios'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Sandwich, SandwichError } from '../types'\nimport SandwichForm from './SandwichForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateSandwich() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createSandwich = useMutation<Sandwich, SandwichError, Sandwich>(\n    (values) => {\n      return axios.post('/api/v1/sandwichs', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('sandwichs')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: Sandwich,\n    { setSubmitting }: FormikHelpers<Sandwich>\n  ) => {\n    createSandwich.mutate(values)\n    setSubmitting?.(false)\n    history.push('/sandwichs')\n  }\n\n  return <SandwichForm onSubmit={handleSubmit} />\n}\n\nexport default CreateSandwich\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport axios from 'axios'\nimport { Sandwich } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype SandwichPreviewProps = {\n  sandwich: Sandwich\n  handleEdit: (sandwich: Sandwich) => void\n  handleDelete: (sandwich: Sandwich) => void\n  handleDetail: (sandwich: Sandwich) => void\n}\n\nfunction SandwichPreview({\n  sandwich,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: SandwichPreviewProps) {\n  return (\n    <>\n      {sandwich.price}\n      <br />\n      <button type='button' onClick={() => handleDetail(sandwich)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(sandwich)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(sandwich)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListSandwichs() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const sandwichsQuery = useQuery<Sandwich[]>('sandwichs', () => {\n    return axios\n      .get('/api/v1/sandwichs')\n      .then((response) => response.data) as Promise<Sandwich[]>\n  })\n\n  const deleteSandwich = useMutation<any, any, Partial<Sandwich>>(\n    ({ id }) => {\n      return axios.delete(`/api/v1/sandwichs/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('sandwichs')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: Sandwich) => {\n    history.push(`/sandwichs/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: Sandwich) => {\n    deleteSandwich.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: Sandwich) => {\n    history.push(`/sandwichs/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{sandwichsQuery.data?.length} sandwichs</p>\n      <ul>\n        {sandwichsQuery.data?.map((sandwich) => (\n          <li key={sandwich.id}>\n            <SandwichPreview\n              sandwich={sandwich}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListSandwichs\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport axios from 'axios'\nimport { useQuery } from 'react-query'\nimport { Sandwich } from '../types'\n\nfunction DetailSandwich() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<Sandwich>(['sandwichs', id], () =>\n    axios.get(`/api/v1/sandwichs/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const sandwich = data as Sandwich\n\n  return (\n    <div>\n      <label>{sandwich.price}</label>\n      <br />\n\n      <label>{sandwich.type}</label>\n      <br />\n\n      <label>{sandwich.warm}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailSandwich\n","import axios from 'axios'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport SandwichForm from './SandwichForm'\nimport { Sandwich } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateSandwich() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<Sandwich>(['sandwichs', id], () =>\n    axios.get(`/api/v1/sandwichs/${id}`).then((response) => response.data)\n  )\n\n  const updateSandwich = useMutation<Sandwich, any, Sandwich>(\n    (values: Sandwich) =>\n      axios\n        .put(`/api/v1/sandwichs/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('sandwichs')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const sandwich = data as Sandwich\n  return (\n    <SandwichForm\n      sandwich={sandwich}\n      onSubmit={(values, { setSubmitting }) => {\n        updateSandwich.mutate(values)\n        setSubmitting?.(false)\n        history.push('/sandwichs')\n      }}\n    />\n  )\n}\n\nexport default UpdateSandwich\n","import React from 'react'\n\nimport CreateCoffee from './coffees/CreateCoffee'\nimport ListCoffee from './coffees/ListCoffee'\nimport DetailCoffee from './coffees/DetailCoffee'\nimport UpdateCoffee from './coffees/UpdateCoffee'\n\nimport CreateIcecream from './icecreams/CreateIcecream'\nimport ListIcecream from './icecreams/ListIcecream'\nimport DetailIcecream from './icecreams/DetailIcecream'\nimport UpdateIcecream from './icecreams/UpdateIcecream'\n\nimport CreateSandwich from './sandwichs/CreateSandwich'\nimport ListSandwich from './sandwichs/ListSandwich'\nimport DetailSandwich from './sandwichs/DetailSandwich'\nimport UpdateSandwich from './sandwichs/UpdateSandwich'\n\nimport { Route, Switch, BrowserRouter as Router, Link } from 'react-router-dom'\n\nimport { useQuery } from 'react-query'\n\nfunction App() {\n  return (\n    <Router>\n      <nav>\n        <ul className='flex'>\n          <li>\n            <Link to='/'>Home</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/coffees'>Coffees</Link>\n            <br />\n            <Link to='/coffees/create'>Create a Coffee</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/icecreams'>Icecreams</Link>\n            <br />\n            <Link to='/icecreams/create'>Create a Icecream</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/sandwichs'>Sandwichs</Link>\n            <br />\n            <Link to='/sandwichs/create'>Create a Sandwich</Link>\n            <br />\n          </li>\n        </ul>\n      </nav>\n      <main>\n        <Route path='/coffees'>\n          <h1>Coffees</h1>\n        </Route>\n\n        <Route path='/icecreams'>\n          <h1>Icecreams</h1>\n        </Route>\n\n        <Route path='/sandwichs'>\n          <h1>Sandwichs</h1>\n        </Route>\n\n        <Switch>\n          {/* Coffee routes */}\n          <Route path='/coffees/create' component={CreateCoffee} />\n          <Route path='/coffees/update/:id' component={UpdateCoffee} />\n          <Route path='/coffees/detail/:id' component={DetailCoffee} />\n          <Route path='/coffees' component={ListCoffee} />,\n          {/* Icecream routes */}\n          <Route path='/icecreams/create' component={CreateIcecream} />\n          <Route path='/icecreams/update/:id' component={UpdateIcecream} />\n          <Route path='/icecreams/detail/:id' component={DetailIcecream} />\n          <Route path='/icecreams' component={ListIcecream} />,\n          {/* Sandwich routes */}\n          <Route path='/sandwichs/create' component={CreateSandwich} />\n          <Route path='/sandwichs/update/:id' component={UpdateSandwich} />\n          <Route path='/sandwichs/detail/:id' component={DetailSandwich} />\n          <Route path='/sandwichs' component={ListSandwich} />\n        </Switch>\n      </main>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}